{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to System Health Lab MkDocs Tutorial and Template \u00b6 This is a tutorial and template based from Mkdocs Frinze Template . This is a template that contains extensions that are very nice to have when you just want a standard documentation for anything! For full documentation visit: mkdocs.org for the generic MkDocs PyMdown Extensions for the different extensions that are installed MkDocs Material for the customisation of the web server documentation. Why documentation? \u00b6 Part of the success of every project is its maintainability, and that means that ability to pass on the knowledge and technical details to the people that will carry on the work. What is Markdown and what is Mkdocs? \u00b6 Markdown is a simplistic markup language that is used to write documentations with a file that ends with .md . The greatest thing about markdown is its simplicity, this allows it to be rendered in many formats - .docx , .pdf , .tex , and with the case of Mkdocs, to render websites. Mkdocs is simply a renderer for markdown that generates files essential for websites (HTML, CSS, JS). These files allows the possiblity of deploying markdown documents into your own websites (in servers or external providers such as github pages). There are a lot of places to learn how to write markdown, and due to its simplistic design, it is relatively easy to learn. Below the summary of a guide made by Github. Alternative There are a lot of alternatives with MkDocs in the realms of markdown-based documentation such as gitbook , confluence , github wiki , and docusaurus . In the side of other ways for documentation: 1 2 - Onenote - Word Documents in OneDrive/Google Drive What do I hope to achieve with this tutorial and template? \u00b6 This tutorial and template has 2 main purpose: Make the documentation setup easier and accessible for everyone (template) Teach Markdown (tutorial) How easy is this to deploy? \u00b6 Clone This Repo or press the big green button \"Use this template\" Follow the installation Delete the markdown files here and replace it with your own Change a couple of things in the mkdocs.yml file (there are comments around it to make it easier) Modify the nav in the mkdocs.yml file or delete it (Mkdocs will sort you documentation files to display) Deploy somewhere ! (easiest way is with Github Pages see here ) Branch Name When you press \"Use This template\", the new repository will have \"template\" in its name. Change that in the Github >> Settings >> Branches >> Default Branch >> \"Click the pencil icon\". Private Repositories Github Pages When you create a private repository, by default, your website will be flagged as \"ready to be published\". To publish the website, you have to go to Github >> Settings >> Pages >> \"Change the Source Branch to gh-pages \" >> Press Save Installation \u00b6 Prerequisite You need to have Python installed to be able to use pip . There are a few ways of installing Python. You can use a package distributor like Anaconda Or you can just install Python . Once you have installed Python, install mkdocs requirements by opening a terminal and typing: 1 pip install -r requirements.txt Python Environments (Optional) however, it is good practice to use different environments for different purposes, in which case, for Anaconda, you would open a terminal and type: 1 2 conda create -n mkdocstutorial python conda activate mkdocstutorial then enter: 1 pip install -r requirements.txt Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy in github pages Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Extending this template \u00b6 This template is made to be simple such that it gives you a brief overview of how you would be writing your documentation with a few configuration. This is the type of documentation that you just build on top of. If in the scenario that you feel that I missed that is essential to be in the template, please feel free to give this repository a pull request. However, if you feel that you would like to extend this template much more, I would highly recommend to visit the original Mkdocs Material Documentation . About this tutorial \u00b6 There are 4 main portion of this tutorial, which are ordered sequentially: Overview and Installation of Mkdocs (the current documentation you are looking at) Writing Markdown Flavoured Markdown Deployment and Automated Deployment","title":"Overview"},{"location":"index.html#welcome-to-system-health-lab-mkdocs-tutorial-and-template","text":"This is a tutorial and template based from Mkdocs Frinze Template . This is a template that contains extensions that are very nice to have when you just want a standard documentation for anything! For full documentation visit: mkdocs.org for the generic MkDocs PyMdown Extensions for the different extensions that are installed MkDocs Material for the customisation of the web server documentation.","title":"Welcome to System Health Lab MkDocs Tutorial and Template"},{"location":"index.html#why-documentation","text":"Part of the success of every project is its maintainability, and that means that ability to pass on the knowledge and technical details to the people that will carry on the work.","title":"Why documentation?"},{"location":"index.html#what-is-markdown-and-what-is-mkdocs","text":"Markdown is a simplistic markup language that is used to write documentations with a file that ends with .md . The greatest thing about markdown is its simplicity, this allows it to be rendered in many formats - .docx , .pdf , .tex , and with the case of Mkdocs, to render websites. Mkdocs is simply a renderer for markdown that generates files essential for websites (HTML, CSS, JS). These files allows the possiblity of deploying markdown documents into your own websites (in servers or external providers such as github pages). There are a lot of places to learn how to write markdown, and due to its simplistic design, it is relatively easy to learn. Below the summary of a guide made by Github. Alternative There are a lot of alternatives with MkDocs in the realms of markdown-based documentation such as gitbook , confluence , github wiki , and docusaurus . In the side of other ways for documentation: 1 2 - Onenote - Word Documents in OneDrive/Google Drive","title":"What is Markdown and what is Mkdocs?"},{"location":"index.html#what-do-i-hope-to-achieve-with-this-tutorial-and-template","text":"This tutorial and template has 2 main purpose: Make the documentation setup easier and accessible for everyone (template) Teach Markdown (tutorial)","title":"What do I hope to achieve with this tutorial and template?"},{"location":"index.html#how-easy-is-this-to-deploy","text":"Clone This Repo or press the big green button \"Use this template\" Follow the installation Delete the markdown files here and replace it with your own Change a couple of things in the mkdocs.yml file (there are comments around it to make it easier) Modify the nav in the mkdocs.yml file or delete it (Mkdocs will sort you documentation files to display) Deploy somewhere ! (easiest way is with Github Pages see here ) Branch Name When you press \"Use This template\", the new repository will have \"template\" in its name. Change that in the Github >> Settings >> Branches >> Default Branch >> \"Click the pencil icon\". Private Repositories Github Pages When you create a private repository, by default, your website will be flagged as \"ready to be published\". To publish the website, you have to go to Github >> Settings >> Pages >> \"Change the Source Branch to gh-pages \" >> Press Save","title":"How easy is this to deploy?"},{"location":"index.html#installation","text":"Prerequisite You need to have Python installed to be able to use pip . There are a few ways of installing Python. You can use a package distributor like Anaconda Or you can just install Python . Once you have installed Python, install mkdocs requirements by opening a terminal and typing: 1 pip install -r requirements.txt Python Environments (Optional) however, it is good practice to use different environments for different purposes, in which case, for Anaconda, you would open a terminal and type: 1 2 conda create -n mkdocstutorial python conda activate mkdocstutorial then enter: 1 pip install -r requirements.txt","title":"Installation"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy in github pages","title":"Commands"},{"location":"index.html#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"index.html#extending-this-template","text":"This template is made to be simple such that it gives you a brief overview of how you would be writing your documentation with a few configuration. This is the type of documentation that you just build on top of. If in the scenario that you feel that I missed that is essential to be in the template, please feel free to give this repository a pull request. However, if you feel that you would like to extend this template much more, I would highly recommend to visit the original Mkdocs Material Documentation .","title":"Extending this template"},{"location":"index.html#about-this-tutorial","text":"There are 4 main portion of this tutorial, which are ordered sequentially: Overview and Installation of Mkdocs (the current documentation you are looking at) Writing Markdown Flavoured Markdown Deployment and Automated Deployment","title":"About this tutorial"},{"location":"deployment_and_automated_site_deployment.html","text":"Site Deployment \u00b6 As said previously, Mkdocs allows conversion of .md to HTML , CSS , and JS files in order to create and deploy websites. Below are the possible approaches. Site Deployment with Github \u00b6 Assuming that your repository is in github, when an Mkdocs repository is created, simply type 1 mkdocs gh-deploy Just follow the prompt, and it will automatically deploy your website in github pages. No other complication needed, this command will handle the following steps: Generation of website files Deployment with Github Pages Automatic Site Deployment with Github Action \u00b6 This is a configuration which allows your documentation from github to auto-deploy to the github pages. You might not want to run mkdocs gh-deploy everytime you have new changes. Why do I need this? Let me give you an example, for this documentation it is hosted at https://uwasystemhealth.github.io/shl-mkdocs-tutorial-and-template/. If this thing is configured, then whenever you modify the github repository, it automatically redeploys in github pages. How do I do this? \u00b6 If you look closely in the repository, there is a file .github/workflows/main.yml . Copy this file over to you repository. The content of it is roughly like below. Note that you have to change 2 lines highlighted to the path of your documentation. Example of Path that you will have to change If in the scenario that your repository is just documentation, which means that your mkdocs.yml file is in the root, then you don't have to change anything. However, there are cases where you have a monorepo - a type of repository that contains multiple files such as for example in a software project, there are the documentation files, and source code files. It is quite common to have a file structure that looks like this: 1 2 3 4 5 6 7 8 9 frontend/ ... backend/ ... mkdocs/ mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. This means that you will have to change the one highlighted. From the example above here, the correct lines changes are: key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} to key: ${{ runner.os }}-pip-${{ hashFiles('**/mkdocs/requirements.txt') }} and python3 -m pip install -r ./requirements.txt to python3 -m pip install -r ./mkdocs/requirements.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Workflow for deploying to github name: Publish docs via GitHub Pages on: push: branches: - master - main - mkdocs-experimental workflow_dispatch: jobs: deploy: name: Deploy docs runs-on: ubuntu-latest steps: - name: Checkout main uses: actions/checkout@v2 - name: Setup Python uses: actions/setup-python@v2 with: python-version: '3.8' - name: Upgrade pip run: | # install pip=>20.1 to use \"pip cache dir\" python3 -m pip install --upgrade pip - name: Get pip cache dir id: pip-cache run: echo \"::set-output name=dir::$(pip cache dir)\" - name: Cache dependencies uses: actions/cache@v2 with: path: ${{ steps.pip-cache.outputs.dir }} key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} restore-keys: | ${{ runner.os }}-pip- - name: Install dependencies run: python3 -m pip install -r ./requirements.txt - run: mkdocs build env: ENABLE_PDF_EXPORT: 1 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./site Custom Domain Name \u00b6 In the scenario that you like a custom domain name such as https://www.tutorial-mkdocs.systemhealthlab.com , follow this documentation . Simplified instructions: Go to the domain registar, in my case Cloudflare Register a \"CNAME\" of the domain/subdomain going towards <organisation/githubname>.github.io (eg. uwasystemhealth.github.io ) Add a CNAME file with the name of the domain/subdomain in the /docs folder Give the CNAME file a content of the subdomain name (eg. tutorial-mkdocs.systemhealthlab.com ) Custom Site Deployment \u00b6 Let say you don't want to deploy it in github pages. You would like to deploy it elsewhere such as your own server or a VPS. Be aware that this portion is a little bit technical, and may not even be what you do in a regular basis or not necessary if you already deployed it with Github Pages. You have to type this command 1 mkdocs build This will create the /site folder which contains your website files. Now you would have to setup a server application that serves static files such as NGINX or Apache server app. After setting this up, copy the contents of the /site folder into the static file folder.","title":"Deployment and Automated Site Deployment"},{"location":"deployment_and_automated_site_deployment.html#site-deployment","text":"As said previously, Mkdocs allows conversion of .md to HTML , CSS , and JS files in order to create and deploy websites. Below are the possible approaches.","title":"Site Deployment"},{"location":"deployment_and_automated_site_deployment.html#site-deployment-with-github","text":"Assuming that your repository is in github, when an Mkdocs repository is created, simply type 1 mkdocs gh-deploy Just follow the prompt, and it will automatically deploy your website in github pages. No other complication needed, this command will handle the following steps: Generation of website files Deployment with Github Pages","title":"Site Deployment with Github"},{"location":"deployment_and_automated_site_deployment.html#automatic-site-deployment-with-github-action","text":"This is a configuration which allows your documentation from github to auto-deploy to the github pages. You might not want to run mkdocs gh-deploy everytime you have new changes. Why do I need this? Let me give you an example, for this documentation it is hosted at https://uwasystemhealth.github.io/shl-mkdocs-tutorial-and-template/. If this thing is configured, then whenever you modify the github repository, it automatically redeploys in github pages.","title":"Automatic Site Deployment with Github Action"},{"location":"deployment_and_automated_site_deployment.html#how-do-i-do-this","text":"If you look closely in the repository, there is a file .github/workflows/main.yml . Copy this file over to you repository. The content of it is roughly like below. Note that you have to change 2 lines highlighted to the path of your documentation. Example of Path that you will have to change If in the scenario that your repository is just documentation, which means that your mkdocs.yml file is in the root, then you don't have to change anything. However, there are cases where you have a monorepo - a type of repository that contains multiple files such as for example in a software project, there are the documentation files, and source code files. It is quite common to have a file structure that looks like this: 1 2 3 4 5 6 7 8 9 frontend/ ... backend/ ... mkdocs/ mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. This means that you will have to change the one highlighted. From the example above here, the correct lines changes are: key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} to key: ${{ runner.os }}-pip-${{ hashFiles('**/mkdocs/requirements.txt') }} and python3 -m pip install -r ./requirements.txt to python3 -m pip install -r ./mkdocs/requirements.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Workflow for deploying to github name: Publish docs via GitHub Pages on: push: branches: - master - main - mkdocs-experimental workflow_dispatch: jobs: deploy: name: Deploy docs runs-on: ubuntu-latest steps: - name: Checkout main uses: actions/checkout@v2 - name: Setup Python uses: actions/setup-python@v2 with: python-version: '3.8' - name: Upgrade pip run: | # install pip=>20.1 to use \"pip cache dir\" python3 -m pip install --upgrade pip - name: Get pip cache dir id: pip-cache run: echo \"::set-output name=dir::$(pip cache dir)\" - name: Cache dependencies uses: actions/cache@v2 with: path: ${{ steps.pip-cache.outputs.dir }} key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} restore-keys: | ${{ runner.os }}-pip- - name: Install dependencies run: python3 -m pip install -r ./requirements.txt - run: mkdocs build env: ENABLE_PDF_EXPORT: 1 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./site","title":"How do I do this?"},{"location":"deployment_and_automated_site_deployment.html#custom-domain-name","text":"In the scenario that you like a custom domain name such as https://www.tutorial-mkdocs.systemhealthlab.com , follow this documentation . Simplified instructions: Go to the domain registar, in my case Cloudflare Register a \"CNAME\" of the domain/subdomain going towards <organisation/githubname>.github.io (eg. uwasystemhealth.github.io ) Add a CNAME file with the name of the domain/subdomain in the /docs folder Give the CNAME file a content of the subdomain name (eg. tutorial-mkdocs.systemhealthlab.com )","title":"Custom Domain Name"},{"location":"deployment_and_automated_site_deployment.html#custom-site-deployment","text":"Let say you don't want to deploy it in github pages. You would like to deploy it elsewhere such as your own server or a VPS. Be aware that this portion is a little bit technical, and may not even be what you do in a regular basis or not necessary if you already deployed it with Github Pages. You have to type this command 1 mkdocs build This will create the /site folder which contains your website files. Now you would have to setup a server application that serves static files such as NGINX or Apache server app. After setting this up, copy the contents of the /site folder into the static file folder.","title":"Custom Site Deployment"},{"location":"flavoured_markdown.html","text":"Flavoured Markdown \u00b6 Flavoured markdown is a type of markdown that is customised with different syntax to provide a more stylistic documentationn. As you know, markdown is great for its simplicity, however this also makes it inflexible when making more stylistic documentation such as creating Math formula with Latex and many more feature that you wil see here. With Flavoured Markdown, there are certain syntax to follow on top of the original markdown syntax. Below is a very very small overview to what Mkdocs Material - the base extension . I will just highlight some of them, because those are the only documentation syntax that is commonly use and usually remembered. Admonitions \u00b6 These are kind of those fancy boxes that you usually in cool Science Books that adds extra information. Note As you can see this box, is very attractive. The syntax for this is: 1 2 !!! note As you can see this box, is very attractive. What If You want a different Title The syntax for this is: 1 2 !!! note \"What If You want a different Title\" As you can see this box, is very attractive. Icons \u00b6 More info here You can also change these icons by changing the first word after !!! or ??? . note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Collapsible Block \u00b6 More info here If things are getting a little bit crowded, why not make some of them collapsible? Example of a More Complex Documentation Here is the basic idea of bubble sort! 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] The Syntax for the Example Above 1 2 3 4 5 6 7 8 9 ??? Example \"Example of a More Complex Documentation\" Here is the basic idea of bubble sort! ```python def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] ``` Code Highlight \u00b6 This is powered by codehilite. Whenever, you need code, this is the one that makes it pretty. For example: 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Highlight Specific Code Lines \u00b6 What if I want to show some cool lines? I could highlight which specific line number should be highlighted. 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Latex / Math Symbol Renderer \u00b6 This is for math nerds that needs some Maths in their documentation. More info on Latex here . For example, the Pythagoras Theorem $$ a^2 + b^2 = c^2 $$ Syntax of the Example Above 1 $$ a^ 2 + b^ 2 = c^ 2 $$ Inline Latex \u00b6 According to the results with the p-value \\(p < 0.05\\) , it means that we will reject the null Hypothesis \\(H_0\\) , and that there is a significant difference in the means. Footnotes \u00b6 Woah woah woah! Getting a little bit nerdy referencer here! \"You can tell that I don't know much about referencing\" 1 . If you click this shiny number, it takes you to the bottom of the page where the reference is. Syntax of the Example Above 1 2 3 4 \"You can tell that I don't know much about referencing\"[^1] [ ^1 ]: Book of Wisdom - John Doe Content Tabs \u00b6 Very useful for when you need one or the other. For example, when dealing with multiple programming languages. C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Syntax of Above 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Icons and Emoji \u00b6 Just worth mentioning, not too sure if you're going to use it. \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg :octicons-octoface-16: \u2013 .icons/octicons/octoface-16.svg Syntax of Above 1 2 3 - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-16: \u2013 `.icons/octicons/octoface-16.svg` Images \u00b6 Can be done with Markdown or HTML. Image Captioning \u00b6 The Logo that Daphne from Coders for Causes gave me Syntax of Above 1 2 3 4 < figure > < img src = \"../images/docs.png\" width = \"100\" /> < figcaption > The Logo that Daphne from Coders for Causes gave me </ figcaption > </ figure > Image Alignment \u00b6 This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say left or right . Now Let me just fill this with some random words so that the image doesn't look to weird. Syntax Above 1 2 3 ![ Placeholder ]( https://dummyimage.com/600x400/f5f5f5/aaaaaa&text=\u2013%20Image%20\u2013 ){: align=left width=300 } This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say `left` or `right` . Now Let me just fill this with some random words so that the image doesn't look to weird. Graph In Markdown / Mermaid Markdown \u00b6 More Information here . What if you really just want to create some fancy graphs, but you really can't be bothered to: Load some other software Draw this graph that you wanted to show Save this graph that you want to show Upload this graph somewhere Link this image back to this documentation Like there are just soooo many steps. Introducing mermaid markdown . graph TD A --> B & C B --> C Syntax for Above 1 2 3 4 5 ```mermaid graph TD A --> B & C B --> C ``` How about more complex ones? Is this complex enough for your graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Syntax for Above 1 2 3 4 5 6 7 ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` Some Examples of Other Charts \u00b6 Sequence Diagram \u00b6 Result sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 ```mermaid sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Gantt Chart \u00b6 Result gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Syntax 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ``` Class Diagram \u00b6 Result classDiagram Class01 < |-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 < --> C2: Cool label Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ```mermaid classDiagram Class01 <|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label ``` Book of Wisdom - John Doe \u21a9","title":"Flavoured Markdown"},{"location":"flavoured_markdown.html#flavoured-markdown","text":"Flavoured markdown is a type of markdown that is customised with different syntax to provide a more stylistic documentationn. As you know, markdown is great for its simplicity, however this also makes it inflexible when making more stylistic documentation such as creating Math formula with Latex and many more feature that you wil see here. With Flavoured Markdown, there are certain syntax to follow on top of the original markdown syntax. Below is a very very small overview to what Mkdocs Material - the base extension . I will just highlight some of them, because those are the only documentation syntax that is commonly use and usually remembered.","title":"Flavoured Markdown"},{"location":"flavoured_markdown.html#admonitions","text":"These are kind of those fancy boxes that you usually in cool Science Books that adds extra information. Note As you can see this box, is very attractive. The syntax for this is: 1 2 !!! note As you can see this box, is very attractive. What If You want a different Title The syntax for this is: 1 2 !!! note \"What If You want a different Title\" As you can see this box, is very attractive.","title":"Admonitions"},{"location":"flavoured_markdown.html#icons","text":"More info here You can also change these icons by changing the first word after !!! or ??? . note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Icons"},{"location":"flavoured_markdown.html#collapsible-block","text":"More info here If things are getting a little bit crowded, why not make some of them collapsible? Example of a More Complex Documentation Here is the basic idea of bubble sort! 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] The Syntax for the Example Above 1 2 3 4 5 6 7 8 9 ??? Example \"Example of a More Complex Documentation\" Here is the basic idea of bubble sort! ```python def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] ```","title":"Collapsible Block"},{"location":"flavoured_markdown.html#code-highlight","text":"This is powered by codehilite. Whenever, you need code, this is the one that makes it pretty. For example: 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ```","title":"Code Highlight"},{"location":"flavoured_markdown.html#highlight-specific-code-lines","text":"What if I want to show some cool lines? I could highlight which specific line number should be highlighted. 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ```","title":"Highlight Specific Code Lines"},{"location":"flavoured_markdown.html#latex-math-symbol-renderer","text":"This is for math nerds that needs some Maths in their documentation. More info on Latex here . For example, the Pythagoras Theorem $$ a^2 + b^2 = c^2 $$ Syntax of the Example Above 1 $$ a^ 2 + b^ 2 = c^ 2 $$","title":"Latex / Math Symbol Renderer"},{"location":"flavoured_markdown.html#inline-latex","text":"According to the results with the p-value \\(p < 0.05\\) , it means that we will reject the null Hypothesis \\(H_0\\) , and that there is a significant difference in the means.","title":"Inline Latex"},{"location":"flavoured_markdown.html#footnotes","text":"Woah woah woah! Getting a little bit nerdy referencer here! \"You can tell that I don't know much about referencing\" 1 . If you click this shiny number, it takes you to the bottom of the page where the reference is. Syntax of the Example Above 1 2 3 4 \"You can tell that I don't know much about referencing\"[^1] [ ^1 ]: Book of Wisdom - John Doe","title":"Footnotes"},{"location":"flavoured_markdown.html#content-tabs","text":"Very useful for when you need one or the other. For example, when dealing with multiple programming languages. C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Syntax of Above 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ```","title":"Content Tabs"},{"location":"flavoured_markdown.html#icons-and-emoji","text":"Just worth mentioning, not too sure if you're going to use it. \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg :octicons-octoface-16: \u2013 .icons/octicons/octoface-16.svg Syntax of Above 1 2 3 - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-16: \u2013 `.icons/octicons/octoface-16.svg`","title":"Icons and Emoji"},{"location":"flavoured_markdown.html#images","text":"Can be done with Markdown or HTML.","title":"Images"},{"location":"flavoured_markdown.html#image-captioning","text":"The Logo that Daphne from Coders for Causes gave me Syntax of Above 1 2 3 4 < figure > < img src = \"../images/docs.png\" width = \"100\" /> < figcaption > The Logo that Daphne from Coders for Causes gave me </ figcaption > </ figure >","title":"Image Captioning"},{"location":"flavoured_markdown.html#image-alignment","text":"This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say left or right . Now Let me just fill this with some random words so that the image doesn't look to weird. Syntax Above 1 2 3 ![ Placeholder ]( https://dummyimage.com/600x400/f5f5f5/aaaaaa&text=\u2013%20Image%20\u2013 ){: align=left width=300 } This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say `left` or `right` . Now Let me just fill this with some random words so that the image doesn't look to weird.","title":"Image Alignment"},{"location":"flavoured_markdown.html#graph-in-markdown-mermaid-markdown","text":"More Information here . What if you really just want to create some fancy graphs, but you really can't be bothered to: Load some other software Draw this graph that you wanted to show Save this graph that you want to show Upload this graph somewhere Link this image back to this documentation Like there are just soooo many steps. Introducing mermaid markdown . graph TD A --> B & C B --> C Syntax for Above 1 2 3 4 5 ```mermaid graph TD A --> B & C B --> C ``` How about more complex ones? Is this complex enough for your graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Syntax for Above 1 2 3 4 5 6 7 ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ```","title":"Graph In Markdown / Mermaid Markdown"},{"location":"flavoured_markdown.html#some-examples-of-other-charts","text":"","title":"Some Examples of Other Charts"},{"location":"flavoured_markdown.html#sequence-diagram","text":"Result sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 ```mermaid sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ```","title":"Sequence Diagram"},{"location":"flavoured_markdown.html#gantt-chart","text":"Result gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Syntax 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ```","title":"Gantt Chart"},{"location":"flavoured_markdown.html#class-diagram","text":"Result classDiagram Class01 < |-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 < --> C2: Cool label Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ```mermaid classDiagram Class01 <|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label ``` Book of Wisdom - John Doe \u21a9","title":"Class Diagram"},{"location":"writing_markdown.html","text":"Writing Markdown \u00b6 Github Guide \u00b6 Here\u2019s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files. Headers \u00b6 1 2 3 # This is an <h1> tag ## This is an <h2> tag ###### This is an <h6> tag Emphasis \u00b6 1 2 3 4 5 6 7 *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_ Lists \u00b6 Unordered \u00b6 1 2 3 4 * Item 1 * Item 2 * Item 2a * Item 2b Ordered \u00b6 1 2 3 4 5 1. Item 1 1. Item 2 1. Item 3 1. Item 3a 1. Item 3b Images \u00b6 1 2 ![GitHub Logo](/images/logo.png) Format: ![Alt Text](url) Links \u00b6 1 2 http://github.com - automatic! [GitHub](http://github.com) Blockquotes \u00b6 1 2 3 4 As Kanye West said: > We're living the future so > the present is our past. Inline code \u00b6 1 2 I think you should use an `<addr>` element here instead.","title":"Writing Markdown"},{"location":"writing_markdown.html#writing-markdown","text":"","title":"Writing Markdown"},{"location":"writing_markdown.html#github-guide","text":"Here\u2019s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files.","title":"Github Guide"},{"location":"writing_markdown.html#headers","text":"1 2 3 # This is an <h1> tag ## This is an <h2> tag ###### This is an <h6> tag","title":"Headers"},{"location":"writing_markdown.html#emphasis","text":"1 2 3 4 5 6 7 *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_","title":"Emphasis"},{"location":"writing_markdown.html#lists","text":"","title":"Lists"},{"location":"writing_markdown.html#unordered","text":"1 2 3 4 * Item 1 * Item 2 * Item 2a * Item 2b","title":"Unordered"},{"location":"writing_markdown.html#ordered","text":"1 2 3 4 5 1. Item 1 1. Item 2 1. Item 3 1. Item 3a 1. Item 3b","title":"Ordered"},{"location":"writing_markdown.html#images","text":"1 2 ![GitHub Logo](/images/logo.png) Format: ![Alt Text](url)","title":"Images"},{"location":"writing_markdown.html#links","text":"1 2 http://github.com - automatic! [GitHub](http://github.com)","title":"Links"},{"location":"writing_markdown.html#blockquotes","text":"1 2 3 4 As Kanye West said: > We're living the future so > the present is our past.","title":"Blockquotes"},{"location":"writing_markdown.html#inline-code","text":"1 2 I think you should use an `<addr>` element here instead.","title":"Inline code"}]}